from microphone import Microphone, CHUNK, RATE
from multiprocessing import Queue, Process

def consume_frames(frames, q, num_sec if num_sec <= 0) = None

@addpattern(consume_frames)
def consume_frames([head] :: tail, q, num_sec) =
  head |> q.put
  consume_frames(tail, q, num_sec - (CHUNK / RATE))

def begin_consumption(mic, q, num_sec):
  stream = mic.open_stream()
  consume_frames(stream.frames(), q, num_sec)
  stream.close()

def destroy_frames(q) =
  """This is a temp function to make sure the queue is being generated properly."""
  q.get()
  destroy_frames(q)

if __name__ == '__main__':
  q = Queue()
  p = Process(target=begin_consumption, args=(Microphone(), q, 25))
  p.start()
  print("Process started")
  d = Process(target=destroy_frames, args=(q,))
  d.start()
  p.join()
  d.terminate()
  print("Process ended")
